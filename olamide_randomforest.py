# -*- coding: utf-8 -*-
"""Olamide RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ABmkF3lVYLva5TnGhh8akn57v4nNp6tU
"""

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error as MSE
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv("rental_info.csv")
df.head()

df.info()

#calculating the amount of days movie was rented for
df["rental_date"] = pd.to_datetime(df["rental_date"])
df["return_date"] = pd.to_datetime(df["return_date"])
df["rental_length"] = (df["return_date"] - df["rental_date"]).dt.days

#calculating age of movie
from datetime import datetime
df["movie_age"] = datetime.now().year - df["release_year"]

df["deleted_scenes"] =  np.where(df["special_features"].str.contains("Deleted Scenes"), 1, 0)
df["behind_the_scenes"] =  np.where(df["special_features"].str.contains("Behind the Scenes"), 1, 0)

#dropping irrelevant columns
df = df.drop(columns = ["special_features", "amount_2", "length_2", "rental_rate_2"])
df.head()

#seperating feature and target variables
drop = ["rental_date", "return_date", "rental_length", ]
X = df.drop(columns = ["rental_date", "return_date", "rental_length"])
y = df["rental_length"]

#spliting data into training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 43)

#creating a lasso model to identify important features in training set
lasso = Lasso(alpha = 0.2, random_state = 43)
lasso.fit(X_train, y_train)

lasso_coef = lasso.coef_

selected_features = X.columns[lasso.coef_ != 0]
print("Selected features:", selected_features)

from sklearn.model_selection import RandomizedSearchCV
param_dist = {
    'n_estimators': np.arange(1,101,1),
    'max_depth':np.arange(1,11,1),
    'min_samples_leaf': np.arange(1, 11, 1)

    }
randomizedsearch = RandomizedSearchCV(rf, param_distributions = param_dist, cv = 5, random_state = 43)

randomizedsearch.fit(X_train, y_train)
best_parameters = randomizedsearch.best_params_
print(best_parameters)

rf = RandomForestRegressor(n_estimators = best_parameters["n_estimators"],
                           max_depth = best_parameters["max_depth"],
                           min_samples_leaf = best_parameters["min_samples_leaf"],
                           random_state = 43
                           )

rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

mse = MSE(y_pred, y_test)
rmse = mse ** (1/2)
print(f"Mean Squared Error: {mse}, Root Mean Squared Error: {rmse}")

